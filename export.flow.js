/**
 * Flowtype definitions for index.ts
 * Generated by Flowgen from a Typescript Definition
 * Flowgen v1.10.0
 */

/**
 * Object-oriented API for Norwegian National ID Validator
 * @example ```javascript
 * import { NorwegianId } from 'norwegian-national-id-validator';
 *
 * const valid = NorwegianId('0000000000');
 * ```
 * @param idNumber norwegian social security number
 */
declare export var NorwegianId: any; // /* NO PRINT IMPLEMENTED: ArrowFunction */ any
/**
 * Calculated the difference betweeen two dates.
 * @param startDate Date instance
 * @param endDate Date instance
 * @private
 */
declare export function diffYears(startDate: Date, endDate: Date): void;

/**
 * Checks if a date is valid against another
 * @param date Date instance
 * @param expectedYear
 * @param expectedMonth
 * @param expectedDay
 */
declare export function isValidDate(
  date: Date,
  expectedYear: string,
  expectedMonth: string,
  expectedDay: string
): boolean;

/**
 * In Norway there is several different ID numbers
 */

declare export var IDNumberType: {|
  +BirthNumber: 0, // 0
  +DNumber: 1, // 1
  +HNumber: 2, // 2
  +FHNumber: 3 // 3
|};

/**
 * Birth numbers, D-number and H-number contains information about gender
 */

declare export var Gender: {|
  +Male: 0, // 0
  +Female: 1 // 1
|};

/**
 * Checks if the given value is a valid Norwegian national identity number.
 * @example ```javascript
 * import { validateNorwegianIdNumber } from 'norwegian-national-id-validator';
 * const valid = validateNorwegianIdNumber(0000000000);
 * ```
 * @param idNumber social security number
 * @returns `true` for valid, and `false` for invalid ID-number.
 */
declare export function validateNorwegianIdNumber(idNumber: string): boolean;

/**
 * Find possible age of person based of IDNumber
 * @param elevenDigits Identification number
 */
declare export function possibleAgesOfPersonWithIdNumber(
  elevenDigits: string
): number[];

/**
 * Returns the age of a person with given Norwegian national identity number.
 * Returns `undefined` when birth date could not be determined (e.g. for FH-numbers and invalid ID-numbers).
 * @param elevenDigits Identification number
 */
declare export function possibleAgeOfPersonWithIdNumber(
  elevenDigits: string
): number | void;

/**
 * Check if idNumber contains birth date
 * @param elevenDigits idNumber
 */
declare export function idNumberContainsBirthDate(
  elevenDigits: string
): boolean;

/**
 * Get possible birth date from IdNumber
 * @param elevenDigits IdNumber
 */
declare function possibleBirthDateOfIdNumber(elevenDigits: string): Date | void;

/**
 * Get the ID number kind/type. This function does not validate, so
 * should be combined with {@linkcode validateNorwegianIdNumber}.
 * @example ```javascript
 * import { idNumberType, validateNorwegianIdNumber } from 'norwegian-national-id-validator';
 * if (validateNorwegianIdNumber(0000000000)) {
 *   const type = idNumberType(00000000000);
 * }
 * ```
 * @param elevenDigits IdNumber
 */
declare function idNumberType(
  elevenDigits: string
): $Values<typeof IDNumberType>;

/**
 * Get possible birth date from BirthNumber
 * @param elevenDigits BirthNumber
 */
declare function possibleBirthDateOfBirthNumber(
  elevenDigits: string
): Date | void;

/**
 * Get possible birth date from HNumber
 * @param elevenDigits HNumber
 */
declare function possibleBirthDateOfHNumber(elevenDigits: string): Date | void;

/**
 * Get possible birth date from DNumber
 * @param elevenDigits DNumber
 */
declare function possibleBirthDateOfDNumber(elevenDigits: string): Date | void;

/**
 * @private
 */
declare function getBirthDate(elevenDigitsWithDDMMYY: string): Date | void;

/**
 * @private
 */
declare function isValidCheckDigits(elevenDigits: string): boolean;

/**
 * @private
 */
declare function isValidCheckDigit(
  staticSequence: number[],
  elevenDigits: number[]
): boolean;

/**
 * Returns the gender based of id number
 * @param elevenDigits id number
 */
declare export function getGender(
  elevenDigits: string
): $Values<typeof Gender> | void;
